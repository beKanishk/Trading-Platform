package com.Project.trading.service;



import java.util.Map;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.Project.trading.model.Coin;
import com.Project.trading.response.ApiResponse;
import com.Project.trading.response.FunctionResponse;
import com.Project.trading.serviceInterface.ChatBotServiceInterface;

@Service
public class ChatBotService implements ChatBotServiceInterface {
	
	@Value("${gemini.api.key}")
	private String geminiAPI;
	
	@Value("${coingecko.api.key}")
	private String coingeckoAPI;
	
	private double convertToDouble(Object value) {
        if (value instanceof Number) {
            return ((Number) value).doubleValue();
        }
        return 0.0;  // Return 0.0 instead of throwing an exception
    }
	
	public Coin makeApiRequest(String currencyName) throws Exception {
		//String url = "https://api.coingecko.com/api/v3/coins/bitcoin";
		String url = "https://api.coingecko.com/api/v3/coins/bitcoin?x_cg_demo_api_key=" + coingeckoAPI;
		
		RestTemplate restTemplate = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		
		HttpEntity<String> entity = new HttpEntity<>(headers);
		ResponseEntity<Map> responseEntity = restTemplate.getForEntity(url, Map.class);
		Map<String, Object> responseBody = responseEntity.getBody();
		
		if(responseBody != null) {
			Map<String, Object> imageMap = (Map<String, Object>)responseBody.get("image");
			Map<String, Object> marketData = (Map<String, Object>)responseBody.get("market_data");
			
			Coin coin = new Coin();
			coin.setId((String) responseBody.get("id"));
			coin.setName((String) responseBody.get("name"));
			coin.setSymbol((String) responseBody.get("symbol"));
			coin.setImage((String)imageMap.get("large"));
			
			coin.setCurrentPrice(convertToDouble(((Map<String, Object>)marketData.get("current_price")).get("usd")));
			coin.setMarketCap(convertToDouble(((Map<String, Object>)marketData.get("market_cap")).get("usd")));
			coin.setMarketCapRank((int) convertToDouble((marketData.get("market_cap_rank"))));
			coin.setTotalVolume(convertToDouble(((Map<String, Object>)marketData.get("total_volume")).get("usd")));
			coin.setHigh24h(convertToDouble(((Map<String, Object>)marketData.get("high_24h")).get("usd")));
			coin.setLow24h(convertToDouble(((Map<String, Object>)marketData.get("low_24h")).get("usd")));
			coin.setPriceChange24h(convertToDouble((marketData.get("price_change_24h"))));
			coin.setPriceChangePercentage24h(convertToDouble((marketData.get("price_change_percentage_24h"))));
			coin.setMarketCapChange24h(convertToDouble((marketData.get("market_cap_change_24h"))));
			coin.setMarketCapChangePercentage24h(convertToDouble((marketData.get("market_cap_change_percentage_24h"))));
			coin.setCirculatingSupply(convertToDouble((marketData.get("circulating_supply"))));
			coin.setTotalSupply(convertToDouble((marketData.get("total_supply"))));
			
			return coin;
		}
		
		throw new Exception("Coin not found");
	}
	
	
	public FunctionResponse getFunctionResponse(String prompt) {
		String GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=" + geminiAPI;
		
		JSONObject requestBody = new JSONObject()
				.put("contents", new JSONArray()
						.put(new JSONObject()
								.put("parts", new JSONArray()
										.put(new JSONObject()
												.put("text", prompt)))))
				.put("tools", new JSONArray()
					.put(new JSONObject()
							.put("functionDeclarations", new JSONArray()
									.put(new JSONObject()
											.put("name", "getCoinDetails")
											.put("description", "Get the coin details from given currency object")
											.put("parameters", new JSONObject()
													.put("type", "OBJECT")
													.put("properties", new JSONObject()
															.put("currencyName", new JSONObject()
																	.put("type", "STRING")
																	.put("description", "The currency name," + "id, symbol."))
															.put("currencyData", new JSONObject()
																	.put("type", "STRING")
																	.put("description", 
																			"Currency Data id," + "symbol," + "image, " + "current_price, " + "market_cap, " + "market_cap_rank, " + "fully_diluted_valuation, " + "total_volume, high_24h, " + "low_24h, price_change_24h, " + "market_cap_change_24h, " + "market_cap_change_percentage_24h, " + "circulating_supply, " + "total_supply, " + "max_supply, " + "ath, " + "ath_change_percentage, " + "ath_date, " + "atl, " + "atl_change_percentage, " + "atl_date, last_updated.")))
													.put("required", new JSONArray()
															.put("currencyName")
															.put("currencyData")))))));
		
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		
		HttpEntity<String> requestEntity = new HttpEntity<>(requestBody.toString(), headers);
		
		//Make POST request
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<String> response = restTemplate.postForEntity(GEMINI_API_URL, requestEntity, String.class);
		
		String responseBody = response.getBody();
		
		JSONObject jsonObject = new JSONObject(responseBody);

        // Extract the first candidate
        JSONArray candidates = jsonObject.getJSONArray("candidates");
        JSONObject firstCandidate = candidates.getJSONObject(0);

        // Extract the function call details
        JSONObject content = firstCandidate.getJSONObject("content");
        JSONArray parts = content.getJSONArray("parts");
        JSONObject firstPart = parts.getJSONObject(0);
        JSONObject functionCall = firstPart.getJSONObject("functionCall");

        String functionName = functionCall.getString("name");
        JSONObject args = functionCall.getJSONObject("args");
        String currencyName = args.getString("currencyName");
        String currencyData = args.getString("currencyData");

        // Print or use the extracted values
        System.out.println("Function Name: " + functionName);
        System.out.println("Currency Name: " + currencyName);
        System.out.println("Currency Data: " + currencyData);
		
		FunctionResponse res = new FunctionResponse();
		res.setCurrencyData(currencyData);
		res.setCurrentName(currencyName);
		res.setFunctionName(functionName);
		
		return res;
	}
	
	@Override
	public ApiResponse getCoinDetails(String prompt) throws Exception {
		Coin apiResponse = makeApiRequest(prompt);
		FunctionResponse functionResponse = getFunctionResponse(prompt);
		
		String GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=" + geminiAPI;
		
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		
		String body = new JSONObject()
			    .put("contents", new JSONArray()
			        .put(new JSONObject()
			            .put("role", "user")
			            .put("parts", new JSONArray()
			                .put(new JSONObject()
			                    .put("text", prompt)
			                )
			            )
			        )
			        .put(new JSONObject()
			            .put("role", "model")
			            .put("parts", new JSONArray()
			                .put(new JSONObject()
			                    .put("functionCall", new JSONObject()
			                        .put("name", "getCoinDetails")
			                        .put("args", new JSONObject()
			                            .put("currencyName", functionResponse.getCurrencyName())
			                            .put("currencyData", functionResponse.getCurrencyData())
			                        )
			                    )
			                )
			            )
			        )
			    );

		
		
		System.out.println("Coin -------" );
		return null;
	}
	
	
	//For GEMINI API
	//this is how data is called in the url
	/*
	 * curl
	 * "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}"
	 * \ -H 'Content-Type: application/json' \ -X POST \ -d '{ "contents": [{
	 * "parts":[{"text": "Write a story about a magic backpack."}] }] }'
	 */	@Override
	public String simpleChat(String prompt) {
		String GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + geminiAPI;
		
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		
		String requestBody = new JSONObject()
				.put("contents", new JSONArray()
						.put(new JSONObject()
								.put("parts", new JSONArray()
										.put(new JSONObject()
												.put("text", prompt))))).toString();
		
		HttpEntity<String> requestEntity = new HttpEntity<>(requestBody, headers);
		
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<String> response = restTemplate.postForEntity(GEMINI_API_URL, requestEntity, String.class);
		
		return response.getBody();
	}
	
}
